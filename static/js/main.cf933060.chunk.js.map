{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ColorPicker","props","divStyle","backgroundColor","color","className","style","hidden","rVal","ColorRange","type","change","gVal","bVal","hexVal","onChange","id","min","max","defaultValue","PaletteCreator","canvasRef","useRef","contextRef","useEffect","canvas","current","width","height","ctx","getContext","panel","drawPanel","xPos","beginPath","rect","fillStyle","fill","closePath","drawHex","font","fillText","applyColor","e","target","ref","ApplyButton","panelNum","onClick","downloading","document","createElement","palette","toDataURL","href","download","click","remove","App","useState","setRVal","setGVal","setBVal","setColor","Number","toString","padStart","title","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sNAoEA,SAASA,EAAYC,GACnB,IAAIC,EAAW,CACbC,gBAAiBF,EAAMG,OAGzB,OACE,sBAAKC,UAAU,eAAf,UACE,qBAAKA,UAAU,gBAAgBC,MAAOJ,IAEtC,sBAAKG,UAAU,kBAAf,UACE,mBAAGA,UAAU,aAAaE,QAAM,EAAhC,SAAiC,oDACjC,oBAAGF,UAAU,aAAb,UAA0B,wCAA1B,IAA+CJ,EAAMO,QACrD,cAACC,EAAD,CACEC,KAAK,IACLN,MAAOH,EAAMG,MACbO,OAAQV,EAAMU,SAEhB,oBAAGN,UAAU,aAAb,UAA0B,wCAA1B,IAA+CJ,EAAMW,QACrD,cAACH,EAAD,CACEC,KAAK,IACLN,MAAOH,EAAMG,MACbO,OAAQV,EAAMU,SAEhB,oBAAGN,UAAU,aAAb,UAA0B,wCAA1B,IAA+CJ,EAAMY,QACrD,cAACJ,EAAD,CACEC,KAAK,IACLN,MAAOH,EAAMG,MACbO,OAAQV,EAAMU,SAGhB,oBAAGN,UAAU,MAAb,UAAmB,yCAAnB,KAA0CJ,EAAMa,gBAMxD,SAASL,EAAWR,GAElB,OACE,qBAAKI,UAAU,QAAf,SACE,uBAAOK,KAAK,QAAQK,SAAUd,EAAMU,OAAQK,GAAIf,EAAMS,KAAMO,IAAI,IAAIC,IAAI,MAAMC,aAAa,QASjG,SAASC,EAAenB,GAEtB,IAAMoB,EAAYC,iBAAO,MACnBC,EAAaD,iBAAO,MAI1BE,qBAAU,WAER,IAAMC,EAASJ,EAAUK,QACzBD,EAAOE,MAAQ,IACfF,EAAOG,OAAS,IAGhB,IAAMC,EAAMJ,EAAOK,WAAW,MAC9BP,EAAWG,QAAUG,IACpB,IAGH,IAAIE,EACC,IADDA,EAEC,IAGL,SAASC,EAAUC,GACjBV,EAAWG,QAAQQ,YACnBX,EAAWG,QAAQS,KAAKF,EAAM,EAAGF,EAASA,GAC1CR,EAAWG,QAAQU,UAAYnC,EAAMG,MACrCmB,EAAWG,QAAQW,OACnBd,EAAWG,QAAQY,YAIrB,SAASC,EAAQN,GAEfV,EAAWG,QAAQQ,YACnBX,EAAWG,QAAQS,KAAKF,EAAM,IAAKF,EAASA,GAC5CR,EAAWG,QAAQU,UAAY,kBAC/Bb,EAAWG,QAAQW,OACnBd,EAAWG,QAAQY,YAGnBf,EAAWG,QAAQc,KAAO,gBAC1BjB,EAAWG,QAAQU,UAAY,QAC/Bb,EAAWG,QAAQe,SAASxC,EAAMa,OAAQmB,EAAO,GAAI,KAGvD,SAASS,EAAWC,GAClB,OAAOA,EAAEC,OAAO5B,IACd,IAAK,IACHgB,EAAU,GACVO,EAAQ,GACR,MACF,IAAK,IACHP,EAAU,KACVO,EAAQ,KACR,MACF,IAAK,IACHP,EAAU,KACVO,EAAQ,KACR,MACF,IAAK,IACHP,EAAU,KACVO,EAAQ,KACR,MACF,IAAK,IACHP,EAAU,KACVO,EAAQ,MAiCd,OACE,sBAAKlC,UAAU,kBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,wBAAQA,UAAU,iBAAiBwC,IAAKxB,MAE1C,sBAAKhB,UAAU,aAAf,UACE,cAACyC,EAAD,CAAaC,SAAS,IAAIL,WAAYA,IACtC,cAACI,EAAD,CAAaC,SAAS,IAAIL,WAAYA,IACtC,cAACI,EAAD,CAAaC,SAAS,IAAIL,WAAYA,IACtC,cAACI,EAAD,CAAaC,SAAS,IAAIL,WAAYA,IACtC,cAACI,EAAD,CAAaC,SAAS,IAAIL,WAAYA,IACtC,wBAAQrC,UAAU,gBAAgB2C,QA7BxC,WAQE,IAAMC,EAAcC,SAASC,cAAc,KAErCC,EADS/B,EAAUK,QACA2B,UAAU,aACnCJ,EAAYK,KAAOF,EACnBH,EAAYM,SAAW,gBACvBN,EAAYO,QACZP,EAAYQ,UAeR,oBACA,wBAAQpD,UAAU,eAAe2C,QAtCvC,WACEzB,EAAWG,QAAQQ,YACnBX,EAAWG,QAAQS,KAAK,EAAG,EAAG,IAAK,KACnCZ,EAAWG,QAAQU,UAAY,QAC/Bb,EAAWG,QAAQW,OACnBd,EAAWG,QAAQY,aAiCf,yBAMR,SAASQ,EAAY7C,GACnB,OACE,wBAAQI,UAAU,eAAeW,GAAIf,EAAM8C,SAAUC,QAAS/C,EAAMyC,WAApE,yBAIWgB,MAxNf,WAEE,MAAsBC,mBAAS,GAA/B,mBAAKnD,EAAL,KAAWoD,EAAX,KACA,EAAsBD,mBAAS,GAA/B,mBAAK/C,EAAL,KAAWiD,EAAX,KACA,EAAsBF,mBAAS,GAA/B,mBAAK9C,EAAL,KAAWiD,EAAX,KACA,EAAwBH,mBAAS,OAAD,OAAQnD,EAAR,YAAgBI,EAAhB,YAAwBC,EAAxB,MAAhC,mBAAKT,EAAL,KAAY2D,EAAZ,KACIjD,EAAM,WAAOkD,OAAOxD,GAAMyD,SAAS,IAAIC,SAAS,EAAG,MAA7C,OAAoDF,OAAOpD,GAAMqD,SAAS,IAAIC,SAAS,EAAG,MAA1F,OAAiGF,OAAOnD,GAAMoD,SAAS,IAAIC,SAAS,EAAG,MAsBjJ,OAJA1C,qBAAU,WACR0B,SAASiB,MAAQ,4BAIjB,sBAAK9D,UAAU,UAAf,UACE,mBAAGA,UAAU,WAAb,2EACA,sBAAKA,UAAU,MAAf,UACE,cAACL,EAAD,CAAaI,MAAOA,EAAOI,KAAMA,EAAMI,KAAMA,EAAMC,KAAMA,EAAMC,OAAQA,EAAQH,OAzBrF,SAAsBgC,GACpB,OAAOA,EAAEC,OAAO5B,IACd,IAAK,IACH4C,EAAQpD,EAAOmC,EAAEC,OAAOwB,OACxB,MACF,IAAK,IACHP,EAAQjD,EAAO+B,EAAEC,OAAOwB,OACxB,MACF,IAAK,IACHN,EAAQjD,EAAO8B,EAAEC,OAAOwB,OAK5BL,EAAS3D,EAAK,cAAUI,EAAV,YAAkBI,EAAlB,YAA0BC,EAA1B,SAYV,cAACO,EAAD,CAAgBhB,MAAOA,EAAOU,OAAQA,WC9C/BuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9B,SAAS+B,eAAe,SAM1BZ,K","file":"static/js/main.cf933060.chunk.js","sourcesContent":["/*\n  Simple Color Palette Creator\n  Author: David Deighan\n  Date: 08/17/2021\n  Technologies Used: JavaScript, CSS, React (Create-React-App)\n  Description:\n    A simple color palette tool, which allows you to choose colors by adjusting\n      RGB sliders, apply colors to sections on the palette, and export the\n      palette as a lossless PNG image for personal use.\n    Special thanks:\n      Maksim Ivanov. Without his 'LETS BUILD A DRAWING APPLICATION\n      USING REACT AND CANVAS API' video, I would have had no idea how to use\n      useRef to set up the canvas in React. It's a well-made, concise, and\n      informative video, too!\n      James Grimshaw. He made a great 5-minute video about how to get a\n      React application working on GitHub pages, and that information was\n      another godsend in getting this working properly.\n*/\n\nimport React, { useState, useEffect, useRef } from 'react';\n// import ReactDOM from 'react-dom';\n//  commented out to prevent warnings, still felt it was necessary to include\nimport './App.css';\n\n// Main app component\nfunction App() {\n  // color states\n  let [rVal, setRVal] = useState(0);\n  let [gVal, setGVal] = useState(0);\n  let [bVal, setBVal] = useState(0);\n  let [color, setColor] = useState(`rgb(${rVal},${gVal},${bVal})`);\n  let hexVal = `#${Number(rVal).toString(16).padStart(2, '0')}${Number(gVal).toString(16).padStart(2, '0')}${Number(bVal).toString(16).padStart(2, '0')}`;\n  function colorChanger(e){\n    switch(e.target.id){\n      case('R'):\n        setRVal(rVal = e.target.value);\n        break;\n      case('G'):\n        setGVal(gVal = e.target.value);\n        break;\n      case('B'):\n        setBVal(bVal = e.target.value);\n        break;\n      default:\n        break;\n    }\n    setColor(color = `rgb(${rVal},${gVal},${bVal})`);\n  }\n\n  useEffect(() => {\n    document.title = \"Simple Palette Creator\";\n  });\n\n  return (\n    <div className='credits'>\n      <p className='descobox'>Simple Color Palette Creator. Made in React by David Deighan.</p>\n      <div className='app'>\n        <ColorPicker color={color} rVal={rVal} gVal={gVal} bVal={bVal} hexVal={hexVal} change={colorChanger}/>\n        <PaletteCreator color={color} hexVal={hexVal} />\n      </div>\n    </div>\n  );\n}\n\n// --Application components--\n/*=======================================*/\n/* COLOR PICKER */\n/*=======================================*/\nfunction ColorPicker(props) {\n  let divStyle = {\n    backgroundColor: props.color\n  }\n\n  return(\n    <div className='color-picker'>\n      <div className='color-display' style={divStyle}>\n      </div>\n      <div className='everything-else'>\n        <p className='descriptor' hidden><strong>Color Picker</strong></p>\n        <p className='descriptor'><strong>R:</strong> {props.rVal}</p>\n        <ColorRange\n          type='R'\n          color={props.color}\n          change={props.change}\n        />\n        <p className='descriptor'><strong>G:</strong> {props.gVal}</p>\n        <ColorRange\n          type='G'\n          color={props.color}\n          change={props.change}\n        />\n        <p className='descriptor'><strong>B:</strong> {props.bVal}</p>\n        <ColorRange\n          type='B'\n          color={props.color}\n          change={props.change}\n        />\n\n        <p className='hex'><strong>HEX</strong>: {props.hexVal}</p>\n      </div>\n    </div>\n  )\n}\n\nfunction ColorRange(props){\n\n  return(\n    <div className='rgbUI'>\n      <input type='range' onChange={props.change} id={props.type} min='0' max='255' defaultValue='0'></input>\n    </div>\n  );\n}\n\n/*=======================================*/\n/* PALETTE CREATOR */\n/*=======================================*/\n\nfunction PaletteCreator(props) {\n  // useRef canvas/context references\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n\n  // useEffect to have the canvas/context be defined upon startup; empty array\n  //  in second parameter means that it runs once and only once.\n  useEffect(() => {\n    // Creates usable canvas reference from canvasRef hook\n    const canvas = canvasRef.current;\n    canvas.width = 950;\n    canvas.height = 600;\n\n    // Creates usable canvas context from the canvas ref + the contextRef hook.\n    const ctx = canvas.getContext('2d');\n    contextRef.current = ctx;\n  }, []);\n\n  // 5 panels = 190px x 600px, width of 1 panel is 190px\n  let panel = {\n    h: 600,\n    w: 190\n  };\n\n  function drawPanel(xPos){\n    contextRef.current.beginPath();\n    contextRef.current.rect(xPos, 0, panel.w, panel.h);\n    contextRef.current.fillStyle = props.color;\n    contextRef.current.fill();\n    contextRef.current.closePath();\n\n  }\n\n  function drawHex(xPos){\n    // Rectangle over which text will be rendered\n    contextRef.current.beginPath();\n    contextRef.current.rect(xPos, 550, panel.w, panel.h);\n    contextRef.current.fillStyle = 'rgba(0,0,0,0.5)';\n    contextRef.current.fill();\n    contextRef.current.closePath();\n\n    // Text containing the hex value of the chosen color\n    contextRef.current.font = '24px consolas';\n    contextRef.current.fillStyle = 'white';\n    contextRef.current.fillText(props.hexVal, xPos + 10, 580);\n  }\n\n  function applyColor(e){\n    switch(e.target.id){\n      case('1'):\n        drawPanel(0);\n        drawHex(0);\n        break;\n      case('2'):\n        drawPanel(190);\n        drawHex(190);\n        break;\n      case('3'):\n        drawPanel(380);\n        drawHex(380);\n        break;\n      case('4'):\n        drawPanel(570);\n        drawHex(570);\n        break;\n      case('5'):\n        drawPanel(760);\n        drawHex(760);\n        break;\n      default:\n        break;\n    }\n  }\n\n  function resetCanvas(){\n    contextRef.current.beginPath();\n    contextRef.current.rect(0, 0, 950, 600);\n    contextRef.current.fillStyle = 'white';\n    contextRef.current.fill();\n    contextRef.current.closePath();\n  }\n\n  function exportCanvas(){\n    /*\n      Creates a temporary anchor element and a URL containing PNG image data\n        for the canvas. It then uses that anchor to store the URL and specifies\n        that it should be downloaded. It auto-clicks, prompting the download,\n        then removes the element immediately afterward for the sake of keeping\n        the DOM clean.\n    */\n    const downloading = document.createElement('a');\n    let whatever = canvasRef.current;\n    const palette = whatever.toDataURL('image/png');\n    downloading.href = palette;\n    downloading.download = 'mypalette.png';\n    downloading.click();\n    downloading.remove();\n\n  }\n\n  return(\n    <div className='palette-creator'>\n      <div className='palette-window'>\n        <canvas className='palette-canvas' ref={canvasRef}></canvas>\n      </div>\n      <div className='palette-ui'>\n        <ApplyButton panelNum='1' applyColor={applyColor} />\n        <ApplyButton panelNum='2' applyColor={applyColor} />\n        <ApplyButton panelNum='3' applyColor={applyColor} />\n        <ApplyButton panelNum='4' applyColor={applyColor} />\n        <ApplyButton panelNum='5' applyColor={applyColor} />\n        <button className='export-button' onClick={exportCanvas}>EXPORT</button>\n        <button className='reset-button' onClick={resetCanvas}>RESET</button>\n      </div>\n    </div>\n  );\n}\n\nfunction ApplyButton(props){\n  return(\n    <button className='apply-button' id={props.panelNum} onClick={props.applyColor}>APPLY COLOR</button>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}